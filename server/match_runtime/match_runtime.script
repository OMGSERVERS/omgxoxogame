local omgruntime = require("omgservers.omgruntime.omgruntime")
local tictactoe = require("server.match_runtime.tictactoe_state")

local SERVER_EVENT_HASH = hash("server_event")

local function handle_started(self)
	print(socket.gettime() .. " [MATCH_RUNTIME] Match was started")
end

local function init_runtime(self, runtime_config, version_config)
	print(socket.gettime() .. " [MATCH_RUNTIME] Runtime was initialized:")
	pprint(version_config)
	self.game_state = tictactoe.new_game()
	self.ended = false
end

local function add_match_client(self, user_id, client_id, group_name, profile)
	print(socket.gettime() .. " [MATCH_RUNTIME] Client " .. client_id .. " of user " .. user_id .. " was added to the group " .. group_name)
	print(socket.gettime() .. " [MATCH_RUNTIME] Profile:")
	pprint(profile)
end 

local function delete_client(self, client_id)
	self.ended = true
	
	local message = {
		qualifier = "opponent_left",
	}
	local encoded_message = json.encode(message)
	omgruntime:broadcast_binary_message(encoded_message)
end

local function broadcast_gamestate_to_recipient(self, recipient)
	local active_player = tictactoe.get_active_player(self.game_state)
	local other_player = tictactoe.get_other_player(self.game_state)
	local your_turn = active_player == recipient
	local message = {
		qualifier = "game_state",
		data = {
			state = self.game_state,
			active_player = active_player,
			other_player = other_player,
			your_turn = your_turn,
		}
	}
	local encoded_message = json.encode(message)
	omgruntime:respond_binary_message(recipient, encoded_message)
end

local function broadcast_game_state(self)
	if not self.ended then
		print(socket.gettime() .. " [MATCH_RUNTIME] Broadcast game state")
		local player = tictactoe.get_active_player(self.game_state)
		local opponent = tictactoe.get_other_player(self.game_state)
		broadcast_gamestate_to_recipient(self, player)
		broadcast_gamestate_to_recipient(self, opponent)
	end
end

local function handle_start_request(self, client_id)
	print(socket.gettime() .. " [MATCH_RUNTIME] Client " .. client_id .. " has requested start")
	
	tictactoe.add_player(self.game_state, client_id)
	if tictactoe.player_count(self.game_state) == 2 then
		-- The match is no longer participating in the matchmaking
		omgruntime:stop_matchmaking()
		
		broadcast_game_state(self)
	end
end

local function handle_player_move(self, client_id, move)
	local row = move.row
	local col = move.col

	if row and col then
		print(socket.gettime() .. " [MATCH_RUNTIME] Client " .. client_id .. " has requested move")
		
		local game_state = self.game_state;
		tictactoe.player_move(game_state, row, col)
		if game_state.winner or game_state.draw then
			game_state.rematch_countdown = 10
		end

		broadcast_game_state(self)
	else
		print(socket.gettime() .. " [MATCH_RUNTIME] Client " .. client_id .. " has sent incorrect move")
	end
end

local function handle_leave_request(self, client_id)
	print(socket.gettime() .. " [MATCH_RUNTIME] Client " .. client_id .. " has leaved")
	omgruntime:kick_client(client_id)
end

local function handle_command(self, command_qualifier, command_body)
	if command_qualifier == omgruntime.constants.INIT_RUNTIME then
		local runtime_config = command_body.runtime_config
		local version_config = runtime_config.version_config
		init_runtime(self, runtime_config, version_config)
		
	elseif command_qualifier == omgruntime.constants.ADD_MATCH_CLIENT then
		local user_id = command_body.user_id
		local client_id = command_body.client_id
		local group_name = command_body.group_name
		local profile = command_body.profile
		add_match_client(self, user_id, client_id, group_name, profile)

		omgruntime:upgrade_connection(client_id)
		
	elseif command_qualifier == omgruntime.constants.DELETE_CLIENT then
		local client_id = command_body.client_id
		print(socket.gettime() .. " [MATCH_RUNTIME] Client " .. client_id .. " was deleted")

		delete_client(self, client_id)
		
	else
		print("[MATCH_RUNTIME] Unsupported command was received, command_qualifier=" .. tostring(command_qualifier))
	end
end

local function handle_message(self, client_id, message)
	print(socket.gettime() .. " [MATCH_RUNTIME] Message was received, client_id=" .. client_id .. ", message=" .. message)

	local status, result = pcall(json.decode, message)
	if status then
		local decoded_message = result
		local message_qualifier = decoded_message.qualifier
		if message_qualifier then
			if message_qualifier == "start_request" then
				handle_start_request(self, client_id)
			elseif message_qualifier == "player_move" then
				local data = decoded_message.data
				if data then
					handle_player_move(self, client_id, decoded_message.data)
				else
					print(socket.gettime() .. " [MATCH_RUNTIME] Message data is nil, client_id=" .. client_id)
				end
			elseif message_qualifier == "leave_request" then
				handle_leave_request(self, client_id)
			else
				print(socket.gettime() .. " [MATCH_RUNTIME] Unknown qualifier=" .. message_qualifier)
			end
		else
			print(socket.gettime() .. " [MATCH_RUNTIME] Message qualifier is nil")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == SERVER_EVENT_HASH then
		local event = message
		local event_qualifier = event.qualifier
		local event_body = event.body

		if event_qualifier == omgruntime.constants.SERVER_STARTED then
			handle_started(self)
		elseif event_qualifier == omgruntime.constants.COMMAND_RECEIVED then
			local command_qualifier = event_body.qualifier
			local command_body = event_body.body
			handle_command(self, command_qualifier, command_body)

		elseif event_qualifier == omgruntime.constants.MESSAGE_RECEIVED then
			local client_id = event_body.client_id
			local message = event_body.message
			handle_message(self, client_id, message)
		else
			print("[MATCH_RUNTIME] Unsupported event was received, event_qualifier=" .. tostring(event_qualifier))
		end
	end
end

function update(self, dt)
	local game_state = self.game_state
	if game_state and game_state.rematch_countdown then
		local current_countdown = game_state.rematch_countdown
		local updated_countdown = current_countdown - dt
		game_state.rematch_countdown = updated_countdown
		
		if math.floor(updated_countdown) < math.floor(current_countdown) then
			if updated_countdown <= 0 then
				print(socket.gettime() .. " [MATCH_RUNTIME] Reset game state")
				self.game_state = tictactoe.rematch(game_state)
			end
			
			broadcast_game_state(self)
		end
	end
end